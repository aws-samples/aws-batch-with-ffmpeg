# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

version: "3"

vars:
  DOCKER_EXE: docker # Choose between docker cli or podman
  S3_BUCKET: batch-ffmpeg-storage-stack-bucket43879c71-aonnotrkkypy
tasks:
  default:
    cmds:
      - echo '{{.DOCKER_EXE}}'
      - |
        {{.DOCKER_EXE}} version

  kaniko-nvidia:
    desc: "Build Container image for nvidia"
    cmds:
      - task: kaniko-build
        vars:
          VARIANT: nvidia2004
          VERSION: 6.0
          ARCH: amd64

  kaniko-xilinx:
    desc: "Build Container image for xilinx"
    cmds:
      - task: kaniko-build
        vars:
          VARIANT: xilinx2004
          VERSION: 4.4
          ARCH: amd64

  kaniko-ubuntu:
    desc: "Build Container image for ubuntu"
    cmds:
      - task: kaniko-build
        vars:
          VARIANT: ubuntu2004
          VERSION: 6.0
          ARCH: amd64

  kaniko-arm64:
    desc: "Build Container image for ubuntu"
    cmds:
      - task: kaniko-build
        vars:
          VARIANT: ubuntu2004
          VERSION: 6.0
          ARCH: arm64

  docker-xilinx:
    desc: "Build Container image for xilinx"
    deps: [docker-login]
    cmds:
      - task: docker-build
        vars:
          VARIANT: xilinx2004-amd64
          VERSION: 4.4
          ARCH: linux/amd64

  docker-nvidia:
    desc: "Build Container images with docker for nvidia"
    deps: [docker-login]
    cmds:
      - task: docker-build
        vars:
          VARIANT: nvidia2004-amd64
          VERSION: 6.0
          ARCH: linux/amd64

  docker-amd64:
    desc: "Build Container images with docker for amd64"
    deps: [docker-login]
    cmds:
      - task: docker-build
        vars:
          VARIANT: ubuntu2004-amd64
          VERSION: 6.0
          ARCH: linux/amd64

  docker-arm64:
    desc: "Build Container images with docker for arm64"
    deps: [docker-login]
    cmds:
      - task: docker-build
        vars:
          VARIANT: ubuntu2004-arm64
          VERSION: 6.0
          ARCH: linux/arm64

  docker-login:
    cmds:
      - echo "Logging in to Amazon ECR"
      - aws ecr get-login-password --region {{.AWS_DEFAULT_REGION}} | {{.DOCKER_EXE}} login --username AWS --password-stdin {{.AWS_ACCOUNT_ID}}.dkr.ecr.{{.AWS_DEFAULT_REGION}}.amazonaws.com

  docker-build:
    cmds:
      - echo "Building the Docker image AWS Batch FFMPEG {{.NAME}}:{{.VERSION}}-{{.VARIANT}}-{{.ARCH}} with Docker"
      - |
        {{.DOCKER_EXE}} build --file docker-images/{{.VERSION}}/{{.VARIANT}}/Dockerfile --platform {{.ARCH}} --tag {{.IMAGE_REPO_NAME}}:{{.VERSION}}-{{.VARIANT}} .
      - |
        {{.DOCKER_EXE}} tag {{.IMAGE_REPO_NAME}}:{{.VERSION}}-{{.VARIANT}} {{.AWS_ACCOUNT_ID}}.dkr.ecr.{{.AWS_DEFAULT_REGION}}.amazonaws.com/{{.IMAGE_REPO_NAME}}:{{.VERSION}}-{{.VARIANT}}
      - echo "Pushing the Docker image"
      - |
        {{.DOCKER_EXE}} push {{.AWS_ACCOUNT_ID}}.dkr.ecr.{{.AWS_DEFAULT_REGION}}.amazonaws.com/{{.IMAGE_REPO_NAME}}:{{.VERSION}}-{{.VARIANT}}

  kaniko-build:
    cmds:
      - echo "Building the Docker image AWS Batch FFMPEG {{.NAME}}:{{.VERSION}}-{{.VARIANT}} with Kaniko"
      - /kaniko/executor --context $CI_PROJECT_DIR/application/ --dockerfile docker-images/{{.VERSION}}/{{.VARIANT}}/Dockerfile{{.EXT}}  --customPlatform=linux/{{.ARCH}} --verbosity=error --compressed-caching=false --cache=false --destination $CDK_DEPLOY_ACCOUNT.dkr.ecr.$CDK_DEPLOY_REGION.amazonaws.com/{{.IMAGE_REPO_NAME}}:{{.VERSION}}-{{.VARIANT}}-{{.ARCH}}

  kaniko-test:
    cmds:
      - kaniko run --rm -it -v ~/.aws:/root/.aws --entrypoint=/bin/sh gcr.io/kaniko-project/executor:debug -i

  docker-test:
    cmds:
      - |
        {{.DOCKER_EXE}} run --rm -it --env AWS_XRAY_SDK_ENABLED=False --env S3_BUCKET={{.S3_BUCKET}} -v ~/.aws:/root/.aws {{.AWS_ACCOUNT_ID}}.dkr.ecr.{{.AWS_DEFAULT_REGION}}.amazonaws.com/{{.IMAGE_REPO_NAME}}:{{.VERSION}}-{{.VARIANT}}  --input_url s3://{{.S3_BUCKET}}/tests/media-assets/norisleepingmusic2_480p.mp4 --output_url s3://{{.S3_BUCKET}}/tests/media-assets/output/docker-run.mp4 --output_file_options '-an' --name='docker'
    vars:
      VARIANT: xilinx2004-amd64
      VERSION: 4.4

  wrapper-test:
    cmds:
      - ../.venv/bin/python ffmpeg_wrapper.py --input_url s3://{{.S3_BUCKET}}/test/test_input.mov --output_url s3://{{.S3_BUCKET}}/test/test_output.mp4 --output_file_options '-vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3' --name='python_test'

  docker-bash:
    deps: [docker-login]
    cmds:
      - |
        {{.DOCKER_EXE}} run --rm -it --entrypoint=/bin/sh nvidia/cuda:12.2.0-devel-ubuntu20.04 -i
    vars:
      VARIANT: nvidia2004-amd64
      VERSION: 6.0
      ARCH: linux/amd64
